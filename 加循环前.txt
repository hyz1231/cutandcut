#include <QApplication>
#include <OccViewerQt/OccViewer/OccViewer.h>
#include <STEPControl_Reader.hxx>
#include <TopoDS_Face.hxx>
#include <TopoDS_Shape.hxx>
#include <AIS_ColoredShape.hxx>
#include <Quantity_Color.hxx>
#include <OccEasyDrawing/EasyDrawing.hpp>
#include <iostream>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <AIS_Shape.hxx>
#include <gp_Pnt.hxx>
#include <Quantity_Color.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <BRepBuilderAPI_MakePolygon.hxx>
#include <BRepAlgoAPI_Cut.hxx>
#include <BRepPrimAPI_MakeBox.hxx>
#include <BRepOffsetAPI_ThruSections.hxx>
#include <BRepBuilderAPI_Sewing.hxx>
#include <BRepBuilderAPI_MakeSolid.hxx>
#include <BRepGProp.hxx>
#include <GProp_GProps.hxx>
#include <TopExp_Explorer.hxx>
#include <TopoDS.hxx>
#include <TopoDS_Shell.hxx>
#include <TopoDS_Solid.hxx>
#include <AIS_Shape.hxx>
#include <fstream>
#include <sstream>
#include <vector>

// 从文件读取点集数据，并按空行分组
std::vector<std::vector<gp_Pnt>> readPointsFromFile(const std::string& filePath) {
    std::ifstream file(filePath);
    std::vector<std::vector<gp_Pnt>> groups;
    std::vector<gp_Pnt> currentGroup;
    std::string line;

    if (!file.is_open()) {
        std::cerr << "Error: Could not open file " << filePath << std::endl;
        return groups;
    }

    // 读取文件内容并解析点，并按空行分组
    while (std::getline(file, line)) {
        if (line.empty()) {
            if (!currentGroup.empty()) {
                groups.push_back(currentGroup);
                currentGroup.clear();
            }
        }
        else {
            std::istringstream iss(line);
            double x, y, z;
            if (iss >> x >> y >> z) {
                currentGroup.emplace_back(gp_Pnt(x, y, z));
            }
        }
    }

    if (!currentGroup.empty()) {
        groups.push_back(currentGroup);
    }

    file.close();
    return groups;
}

// 从点集生成模型并返回 TopoDS_Shape
TopoDS_Shape generateModelFromPoints(const std::vector<gp_Pnt>& points1, const std::vector<gp_Pnt>& points2) {
    if (points1.size() < 3 || points2.size() < 3) {
        std::cerr << "Error: Insufficient points in one of the point sets." << std::endl;
        return TopoDS_Shape();
    }

    // 创建多边形
    BRepBuilderAPI_MakePolygon edge1;
    for (const auto& point : points1) {
        edge1.Add(point);
    }
    edge1.Close();

    BRepBuilderAPI_MakePolygon edge2;
    for (const auto& point : points2) {
        edge2.Add(point);
    }
    edge2.Close();

    // 使用 BRepOffsetAPI_ThruSections 生成直纹面
    BRepOffsetAPI_ThruSections generator(Standard_True, Standard_False);
    generator.AddWire(edge1.Wire());
    generator.AddWire(edge2.Wire());
    generator.CheckCompatibility(Standard_False);  // 不检查兼容性
    generator.Build(); // 构建形状
    TopoDS_Shape ruledSurface = generator.Shape(); // 生成直纹面

    // 使用 BRepBuilderAPI_Sewing 进行缝合操作
    BRepBuilderAPI_Sewing sewing;
    sewing.Add(ruledSurface);
    sewing.Perform();

    // 获取缝合后的形状
    TopoDS_Shape sewedShape = sewing.SewedShape();

    // 验证 sewedShape 是否为 Shell，并转换为 Solid
    TopExp_Explorer explorer(sewedShape, TopAbs_SHELL);
    if (explorer.More()) {
        TopoDS_Shell shellShape = TopoDS::Shell(explorer.Current());
        TopoDS_Solid solidShape = BRepBuilderAPI_MakeSolid(shellShape);
        return solidShape; // 返回生成的 Solid 形状
    }
    else {
        std::cout << "Error: sewedShape is not a valid shell." << std::endl;
        return TopoDS_Shape();
    }
}

// 计算体积
Standard_Real calculateVolume(const TopoDS_Shape& shape) {
    GProp_GProps systemProps;
    BRepGProp::VolumeProperties(shape, systemProps);
    Standard_Real volume_mm3 = systemProps.Mass();  // 计算得到的体积（立方毫米）
    Standard_Real volume_m3 = volume_mm3 / 1e9;     // 转换为立方米
    return volume_m3;
}

int main(int argc, char* argv[]) {
    QApplication a(argc, argv);

    OccViewerQt::OccViewer viewer{};
    viewer.show();

    // 读取 STP 文件并转换成 TopoDS_Shape
    STEPControl_Reader reader;
    IFSelect_ReturnStatus status = reader.ReadFile("C:/Users/Administrator/Desktop/HULL A.1.stp");
    if (status != IFSelect_RetDone) {
        std::cerr << "Error reading STEP file." << std::endl;
        return 1;
    }
    reader.TransferRoot();
    TopoDS_Shape shape = reader.OneShape();

    // 从 txt 文件读取点集数据
    std::vector<std::vector<gp_Pnt>> groups = readPointsFromFile("C:/Users/Administrator/Desktop/hhh.txt");
    if (groups.size() < 6) {
        std::cerr << "Error: Not enough point groups in the file." << std::endl;
        return -1;
    }

    // 获取交互上下文
    Handle(AIS_InteractiveContext) context = viewer.GetAISContext();

    // 生成第一个模型（第一组和第二组）
    const auto& points1 = groups[0];
    const auto& points2 = groups[1];
    TopoDS_Shape txtModelShape1 = generateModelFromPoints(points1, points2);
    if (txtModelShape1.IsNull()) {
        std::cerr << "Error: Failed to generate model from txt file." << std::endl;
        return -1;
    }

    // 第一次布尔运算（X = 39500 和 X = 45450 处切割）
    TopoDS_Shape box1 = BRepPrimAPI_MakeBox(gp_Pnt(-1e9, -1e6, -1e6), gp_Pnt(39500, 1e6, 1e6)).Shape();
    TopoDS_Shape box2 = BRepPrimAPI_MakeBox(gp_Pnt(45450, -1e6, -1e6), gp_Pnt(1e9, 1e6, 1e6)).Shape();
    TopoDS_Shape shapeAfterFirstCut = BRepAlgoAPI_Cut(shape, box1);
    TopoDS_Shape finalShape1 = BRepAlgoAPI_Cut(shapeAfterFirstCut, box2);
    TopoDS_Shape resultShape1 = BRepAlgoAPI_Cut(finalShape1, txtModelShape1);

    // 显示第一次布尔减法运算的结果
    Handle(AIS_Shape) aisShape1 = new AIS_Shape(resultShape1);
    context->Display(aisShape1, Standard_True);

    // 计算第一次布尔减法运算的体积
    Standard_Real volume1 = calculateVolume(resultShape1);
    std::cout << "The volume of the first model is: " << volume1 << " cubic meters." << std::endl;

    // 生成第二个模型（第二组和第三组）
    const auto& points3 = groups[2]; // 第三组
    TopoDS_Shape txtModelShape2 = generateModelFromPoints(points2, points3);  // 使用第二组和第三组生成模型
    if (txtModelShape2.IsNull()) {
        std::cerr << "Error: Failed to generate model from txt file." << std::endl;
        return -1;
    }

    // 第二次布尔运算（X = 45450 和 X = 69250 处切割）
    TopoDS_Shape box3 = BRepPrimAPI_MakeBox(gp_Pnt(-1e9, -1e6, -1e6), gp_Pnt(45450, 1e6, 1e6)).Shape();
    TopoDS_Shape box4 = BRepPrimAPI_MakeBox(gp_Pnt(69250, -1e6, -1e6), gp_Pnt(1e9, 1e6, 1e6)).Shape();
    TopoDS_Shape shapeAfterSecondCut = BRepAlgoAPI_Cut(shape, box3);
    TopoDS_Shape finalShape2 = BRepAlgoAPI_Cut(shapeAfterSecondCut, box4);
    TopoDS_Shape resultShape2 = BRepAlgoAPI_Cut(finalShape2, txtModelShape2);

    // 显示第二次布尔减法运算的结果
    Handle(AIS_Shape) aisShape2 = new AIS_Shape(resultShape2);
    context->Display(aisShape2, Standard_True);

    // 计算第二次布尔减法运算的体积
    Standard_Real volume2 = calculateVolume(resultShape2);
    std::cout << "The volume of the second model is: " << volume2 << " cubic meters." << std::endl;

    // 生成第三个模型（第三组和第四组）
    const auto& points4 = groups[3]; // 第四组
    TopoDS_Shape txtModelShape3 = generateModelFromPoints(points3, points4);  // 使用第三组和第四组生成模型
    if (txtModelShape3.IsNull()) {
        std::cerr << "Error: Failed to generate model from txt file." << std::endl;
        return -1;
    }

    // 第三次布尔运算（X = 69250 和 X = 96450 处切割）
    TopoDS_Shape box5 = BRepPrimAPI_MakeBox(gp_Pnt(-1e9, -1e6, -1e6), gp_Pnt(69250, 1e6, 1e6)).Shape();
    TopoDS_Shape box6 = BRepPrimAPI_MakeBox(gp_Pnt(96450, -1e6, -1e6), gp_Pnt(1e9, 1e6, 1e6)).Shape();
    TopoDS_Shape shapeAfterThirdCut = BRepAlgoAPI_Cut(shape, box5);
    TopoDS_Shape finalShape3 = BRepAlgoAPI_Cut(shapeAfterThirdCut, box6);
    TopoDS_Shape resultShape3 = BRepAlgoAPI_Cut(finalShape3, txtModelShape3);

    // 显示第三次布尔减法运算的结果
    Handle(AIS_Shape) aisShape3 = new AIS_Shape(resultShape3);
    context->Display(aisShape3, Standard_True);

    // 计算第三次布尔减法运算的体积
    Standard_Real volume3 = calculateVolume(resultShape3);
    std::cout << "The volume of the third model is: " << volume3 << " cubic meters." << std::endl;

    // 生成第四个模型（第四组和第五组）
    const auto& points5 = groups[4]; // 第五组
    TopoDS_Shape txtModelShape4 = generateModelFromPoints(points4, points5);  // 使用第四组和第五组生成模型
    if (txtModelShape4.IsNull()) {
        std::cerr << "Error: Failed to generate model from txt file." << std::endl;
        return -1;
    }

    // 第四次布尔运算（X = 96450 和 X = 125350 处切割）
    TopoDS_Shape box7 = BRepPrimAPI_MakeBox(gp_Pnt(-1e9, -1e6, -1e6), gp_Pnt(96450, 1e6, 1e6)).Shape();
    TopoDS_Shape box8 = BRepPrimAPI_MakeBox(gp_Pnt(125350, -1e6, -1e6), gp_Pnt(1e9, 1e6, 1e6)).Shape();
    TopoDS_Shape shapeAfterFourthCut = BRepAlgoAPI_Cut(shape, box7);
    TopoDS_Shape finalShape4 = BRepAlgoAPI_Cut(shapeAfterFourthCut, box8);
    TopoDS_Shape resultShape4 = BRepAlgoAPI_Cut(finalShape4, txtModelShape4);

    // 显示第四次布尔减法运算的结果
    Handle(AIS_Shape) aisShape4 = new AIS_Shape(resultShape4);
    context->Display(aisShape4, Standard_True);

    // 计算第四次布尔减法运算的体积
    Standard_Real volume4 = calculateVolume(resultShape4);
    std::cout << "The volume of the fourth model is: " << volume4 << " cubic meters." << std::endl;

    // 生成第五个模型（第五组和第六组）
    const auto& points6 = groups[5]; // 第六组
    TopoDS_Shape txtModelShape5 = generateModelFromPoints(points5, points6);  // 使用第五组和第六组生成模型
    if (txtModelShape5.IsNull()) {
        std::cerr << "Error: Failed to generate model from txt file." << std::endl;
        return -1;
    }

    // 第五次布尔运算（X = 125350 和 X = 152550 处切割）
    TopoDS_Shape box9 = BRepPrimAPI_MakeBox(gp_Pnt(-1e9, -1e6, -1e6), gp_Pnt(125350, 1e6, 1e6)).Shape();
    TopoDS_Shape box10 = BRepPrimAPI_MakeBox(gp_Pnt(152550, -1e6, -1e6), gp_Pnt(1e9, 1e6, 1e6)).Shape();
    TopoDS_Shape shapeAfterFifthCut = BRepAlgoAPI_Cut(shape, box9);
    TopoDS_Shape finalShape5 = BRepAlgoAPI_Cut(shapeAfterFifthCut, box10);
    TopoDS_Shape resultShape5 = BRepAlgoAPI_Cut(finalShape5, txtModelShape5);

    // 显示第五次布尔减法运算的结果
    Handle(AIS_Shape) aisShape5 = new AIS_Shape(resultShape5);
    context->Display(aisShape5, Standard_True);

    // 计算第五次布尔减法运算的体积
    Standard_Real volume5 = calculateVolume(resultShape5);
    std::cout << "The volume of the fifth model is: " << volume5 << " cubic meters." << std::endl;

    // 调整视图
    viewer.GetViewWidget()->Shading();
    viewer.GetViewWidget()->FitAll();

    return QApplication::exec();
}



